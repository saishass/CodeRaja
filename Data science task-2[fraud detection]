1.Required Libraries

pip install pandas numpy scikit-learn matplotlib seaborn tensorflow

2.python code

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.callbacks import EarlyStopping

# 1. Data Collection (Assuming a dataset 'transactions.csv' is available)
# Load the dataset
df = pd.read_csv('transactions.csv')

# Display basic information
print(df.head())
print(df.info())
print(df.describe())

# 2. Data Preprocessing
# Check for missing values
print(df.isnull().sum())

# Fill or drop missing values as appropriate
df = df.dropna()

# Convert categorical columns to numerical
df = pd.get_dummies(df, drop_first=True)

# 3. Feature Engineering
# Assume 'amount' and 'oldbalanceOrg' are important features
df['new_feature'] = df['amount'] / (df['oldbalanceOrg'] + 1)

# 4. Exploratory Data Analysis (EDA)
# Plot the distribution of the target variable
sns.countplot(x='isFraud', data=df)
plt.show()

# Correlation matrix
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.show()

# 5. Model Selection and Training
# Define features and target
X = df.drop('isFraud', axis=1)
y = df['isFraud']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Using Random Forest Classifier
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Model evaluation
y_pred_rf = rf_model.predict(X_test)
print("Random Forest Classifier")
print(confusion_matrix(y_test, y_pred_rf))
print(classification_report(y_test, y_pred_rf))

# Using Deep Learning Model (Neural Network)
nn_model = Sequential()
nn_model.add(Dense(30, input_dim=X_train.shape[1], activation='relu'))
nn_model.add(Dense(15, activation='relu'))
nn_model.add(Dense(1, activation='sigmoid'))

nn_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Adding early stopping
early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)

# Training the model
history = nn_model.fit(X_train, y_train, epochs=100, validation_split=0.2, batch_size=32, callbacks=[early_stopping])

# Plot training history
plt.plot(history.history['loss'], label='loss')
plt.plot(history.history['val_loss'], label='val_loss')
plt.legend()
plt.show()

# Model evaluation
y_pred_nn = (nn_model.predict(X_test) > 0.5).astype("int32")
print("Neural Network")
print(confusion_matrix(y_test, y_pred_nn))
print(classification_report(y_test, y_pred_nn))

# Save the models
rf_model.save('random_forest_model.pkl')
nn_model.save('neural_network_model.h5')





