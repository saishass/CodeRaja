1.task 1(todos.py)
import json
import os

class TodoApp:
    def __init__(self, filename='tasks.json'):
        self.filename = filename
        self.tasks = self.load_tasks()

    def load_tasks(self):
        if os.path.exists(self.filename):
            with open(self.filename, 'r') as file:
                return json.load(file)
        return []

    def save_tasks(self):
        with open(self.filename, 'w') as file:
            json.dump(self.tasks, file, indent=4)

    def add_task(self, description, priority='medium'):
        task = {
            'description': description,
            'priority': priority,
            'completed': False
        }
        self.tasks.append(task)
        self.save_tasks()

    def remove_task(self, index):
        if 0 <= index < len(self.tasks):
            del self.tasks[index]
            self.save_tasks()

    def edit_task(self, index, description=None, priority=None, completed=None):
        if 0 <= index < len(self.tasks):
            if description:
                self.tasks[index]['description'] = description
            if priority:
                self.tasks[index]['priority'] = priority
            if completed is not None:
                self.tasks[index]['completed'] = completed
            self.save_tasks()

    def list_tasks(self):
        for i, task in enumerate(self.tasks):
            status = 'Done' if task['completed'] else 'Not Done'
            print(f"{i}. {task['description']} (Priority: {task['priority']}) - {status}")

    def main(self):
        while True:
            print("\nTo-Do List Application")
            print("1. List all tasks")
            print("2. Add a new task")
            print("3. Edit a task")
            print("4. Remove a task")
            print("5. Quit")

            choice = input("Enter your choice: ")

            if choice == '1':
                self.list_tasks()
            elif choice == '2':
                description = input("Enter task description: ")
                priority = input("Enter task priority (high, medium, low): ")
                self.add_task(description, priority)
            elif choice == '3':
                index = int(input("Enter the task number to edit: "))
                description = input("Enter new description (or leave empty to keep current): ")
                priority = input("Enter new priority (high, medium, low) (or leave empty to keep current): ")
                completed = input("Is the task completed? (yes/no): ").lower()
                completed = True if completed == 'yes' else False if completed == 'no' else None
                self.edit_task(index, description, priority, completed)
            elif choice == '4':
                index = int(input("Enter the task number to remove: "))
                self.remove_task(index)
            elif choice == '5':
                print("Goodbye!")
                break
            else:
                print("Invalid choice, please try again.")

if __name__ == '__main__':
    app = TodoApp()
    app.main()


task 2(budget_tracker.py)
import json
import os

class BudgetTracker:
    def __init__(self, filename='budget_data.json'):
        self.filename = filename
        self.data = self.load_data()

    def load_data(self):
        if os.path.exists(self.filename):
            with open(self.filename, 'r') as file:
                return json.load(file)
        return {'income': [], 'expenses': []}

    def save_data(self):
        with open(self.filename, 'w') as file:
            json.dump(self.data, file, indent=4)

    def add_income(self, amount, source):
        self.data['income'].append({'amount': amount, 'source': source})
        self.save_data()

    def add_expense(self, amount, category):
        self.data['expenses'].append({'amount': amount, 'category': category})
        self.save_data()

    def calculate_budget(self):
        total_income = sum(item['amount'] for item in self.data['income'])
        total_expenses = sum(item['amount'] for item in self.data['expenses'])
        return total_income, total_expenses, total_income - total_expenses

    def analyze_expenses(self):
        category_totals = {}
        for expense in self.data['expenses']:
            if expense['category'] in category_totals:
                category_totals[expense['category']] += expense['amount']
            else:
                category_totals[expense['category']] = expense['amount']
        return category_totals

    def main(self):
        while True:
            print("\nBudget Tracker Application")
            print("1. Add Income")
            print("2. Add Expense")
            print("3. Calculate Budget")
            print("4. Analyze Expenses")
            print("5. Quit")

            choice = input("Enter your choice: ")

            if choice == '1':
                amount = float(input("Enter income amount: "))
                source = input("Enter income source: ")
                self.add_income(amount, source)
            elif choice == '2':
                amount = float(input("Enter expense amount: "))
                category = input("Enter expense category: ")
                self.add_expense(amount, category)
            elif choice == '3':
                total_income, total_expenses, balance = self.calculate_budget()
                print(f"\nTotal Income: ${total_income:.2f}")
                print(f"Total Expenses: ${total_expenses:.2f}")
                print(f"Balance: ${balance:.2f}")
            elif choice == '4':
                category_totals = self.analyze_expenses()
                print("\nExpense Analysis by Category:")
                for category, total in category_totals.items():
                    print(f"{category}: ${total:.2f}")
            elif choice == '5':
                print("Goodbye!")
                break
            else:
                print("Invalid choice, please try again.")

if __name__ == '__main__':
    app = BudgetTracker()
    app.main()

